{"instances":{"application":{"persistent":false},"Header/0-0-0-0":{"expanded":false,"persistent":false,"locale":"en-US","i18n":{"home":{"title":"Nullstack","href":"/"},"links":[{"title":"What is Nullstack?","href":"/what-is-nullstack"},{"title":"Documentation","href":"/getting-started"},{"title":"Examples","href":"/examples"},{"title":"Contributors","href":"/contributors"},{"title":"F.A.Q","href":"/frequently-asked-questions"},{"title":"Waifu","href":"/waifu"}],"menu":{"title":"Toggle Menu"},"action":{"title":"Get Started","href":"/getting-started"},"search":{"title":"Search [ctrl + k]"},"language":{"title":"Português","href":"/pt-br"},"mode":{"dark":"Night Mode","light":"Day Mode"}}},"Article/0-0-0-18/server-functions":{"title":"Server Functions","html":"<p>Server functions are specialized microservices that at transpile time are converted into API entry points.<\\/p>\n<p>To flag a function as a server function, you must declare it as <code>static async<\\/code>.<\\/p>\n<p>Being a static function means it has no access to the instance scope.<\\/p>\n<p>However, instead of calling the static version from the <em>class<\\/em>, you must invoke it as an <em>instance<\\/em> function.<\\/p>\n<p>Server functions can be called anytime in your code and are not limited to <a href=\"/server-side-rendering\">prerender<\\/a> steps.<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'nullstack'<\\/span><span class=\"token punctuation\">;<\\/span>\n\n<span class=\"token keyword\">class<\\/span> <span class=\"token class-name\">Component<\\/span> <span class=\"token keyword\">extends<\\/span> <span class=\"token class-name\">Nullstack<\\/span> <span class=\"token punctuation\">{<\\/span>\n\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">increment<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\">context<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    context<span class=\"token punctuation\">.<\\/span>count<span class=\"token operator\">++<\\/span><span class=\"token punctuation\">;<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token keyword\">async<\\/span> <span class=\"token function\">handleClick<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">await<\\/span> <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span><span class=\"token function\">increment<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// ...<\\/span>\n\n<span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token keyword\">export<\\/span> <span class=\"token keyword\">default<\\/span> Component<span class=\"token punctuation\">;<\\/span>\n<\\/code><\\/pre>\n<p>You can also call static methods directly which is useful for some code patterns that invoke external server functions.<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'nullstack'<\\/span><span class=\"token punctuation\">;<\\/span>\n<span class=\"token keyword\">import<\\/span> UserStore <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'./UserStore'<\\/span><span class=\"token punctuation\">;<\\/span>\n\n<span class=\"token keyword\">class<\\/span> <span class=\"token class-name\">Component<\\/span> <span class=\"token keyword\">extends<\\/span> <span class=\"token class-name\">Nullstack<\\/span> <span class=\"token punctuation\">{<\\/span>\n\n  <span class=\"token keyword\">async<\\/span> <span class=\"token function\">initiate<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span>users <span class=\"token operator\">=<\\/span> <span class=\"token keyword\">await<\\/span> UserStore<span class=\"token punctuation\">.<\\/span><span class=\"token function\">getAllUsers<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// ...<\\/span>\n\n<span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token keyword\">export<\\/span> <span class=\"token keyword\">default<\\/span> Component<span class=\"token punctuation\">;<\\/span>\n<\\/code><\\/pre>\n<blockquote>\n<p>✨ Learn more about the <a href=\"/context\">server context<\\/a>.<\\/p>\n<\\/blockquote>\n<h2 id=\"client-behavior\"><a href=\"#client-behavior\">Client behavior<\\/a><\\/h2><p>When you call a server function from the client, the arguments will be serialized as JSON.<\\/p>\n<p>The arguments will be posted against the automatically generated API and merged with the server context when it reaches the server.<\\/p>\n<p>The return value of the server function will be serialized back to the client and can be seamlessly used as if it were a local function.<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'nullstack'<\\/span><span class=\"token punctuation\">;<\\/span>\n\n<span class=\"token keyword\">class<\\/span> <span class=\"token class-name\">Component<\\/span> <span class=\"token keyword\">extends<\\/span> <span class=\"token class-name\">Nullstack<\\/span> <span class=\"token punctuation\">{<\\/span>\n\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">increment<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\">context<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    context<span class=\"token punctuation\">.<\\/span>count<span class=\"token operator\">++<\\/span><span class=\"token punctuation\">;<\\/span>\n    <span class=\"token keyword\">return<\\/span> context<span class=\"token punctuation\">.<\\/span>count<span class=\"token punctuation\">;<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token keyword\">async<\\/span> <span class=\"token function\">handleClick<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span>count <span class=\"token operator\">=<\\/span> <span class=\"token keyword\">await<\\/span> <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span><span class=\"token function\">increment<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// ...<\\/span>\n\n<span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token keyword\">export<\\/span> <span class=\"token keyword\">default<\\/span> Component<span class=\"token punctuation\">;<\\/span>\n<\\/code><\\/pre>\n<h2 id=\"server-behavior\"><a href=\"#server-behavior\">Server behavior<\\/a><\\/h2><p>Server functions will be used as local functions, simply aliasing the <em>instance<\\/em> call to the <em>class<\\/em> and merging the arguments with the server context.<\\/p>\n<h2 id=\"date-convenience\"><a href=\"#date-convenience\">Date Convenience<\\/a><\\/h2><p>Dates are serialized as UTC in JSON and deserialized back to <code>Date<\\/code> objects.<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'nullstack'<\\/span><span class=\"token punctuation\">;<\\/span>\n\n<span class=\"token keyword\">class<\\/span> <span class=\"token class-name\">Component<\\/span> <span class=\"token keyword\">extends<\\/span> <span class=\"token class-name\">Nullstack<\\/span> <span class=\"token punctuation\">{<\\/span>\n\n  <span class=\"token keyword\">async<\\/span> <span class=\"token function\">initiate<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">const<\\/span> date <span class=\"token operator\">=<\\/span> <span class=\"token keyword\">new<\\/span> <span class=\"token class-name\">Date<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n    <span class=\"token keyword\">const<\\/span> verified <span class=\"token operator\">=<\\/span> <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span><span class=\"token function\">verifyDay<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">{<\\/span>date<span class=\"token punctuation\">}<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">verifyDay<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span>date<span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">return<\\/span> date<span class=\"token punctuation\">.<\\/span><span class=\"token function\">getDay<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token operator\">===<\\/span> <span class=\"token keyword\">new<\\/span> <span class=\"token class-name\">Date<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">.<\\/span><span class=\"token function\">getDay<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// ...<\\/span>\n\n<span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token keyword\">export<\\/span> <span class=\"token keyword\">default<\\/span> Component<span class=\"token punctuation\">;<\\/span>\n<\\/code><\\/pre>\n<h2 id=\"fetch-convenience\"><a href=\"#fetch-convenience\">Fetch Convenience<\\/a><\\/h2><p><code>fetch<\\/code> is available in both server and client functions for the sake of isomorphy.<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'nullstack'<\\/span><span class=\"token punctuation\">;<\\/span>\n\n<span class=\"token keyword\">class<\\/span> <span class=\"token class-name\">Component<\\/span> <span class=\"token keyword\">extends<\\/span> <span class=\"token class-name\">Nullstack<\\/span> <span class=\"token punctuation\">{<\\/span>\n\n  <span class=\"token comment\">// ...<\\/span>\n\n  <span class=\"token keyword\">async<\\/span> <span class=\"token function\">initiate<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">const<\\/span> url <span class=\"token operator\">=<\\/span> <span class=\"token string\">'https://api.github.com/repos/nullstack/nullstack/issues'<\\/span><span class=\"token punctuation\">;<\\/span>\n    <span class=\"token keyword\">const<\\/span> response <span class=\"token operator\">=<\\/span> <span class=\"token keyword\">await<\\/span> <span class=\"token function\">fetch<\\/span><span class=\"token punctuation\">(<\\/span>url<span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n    <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span>issues <span class=\"token operator\">=<\\/span> <span class=\"token keyword\">await<\\/span> response<span class=\"token punctuation\">.<\\/span><span class=\"token function\">json<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// ...<\\/span>\n\n<span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token keyword\">export<\\/span> <span class=\"token keyword\">default<\\/span> Component<span class=\"token punctuation\">;<\\/span>\n<\\/code><\\/pre>\n<h2 id=\"server-only-imports\"><a href=\"#server-only-imports\">Server only imports<\\/a><\\/h2><p>Imported dependencies that are only used inside server functions will be excluded from the client bundle.<\\/p>\n<p>This is useful for both accessing node.js exclusive modules and reducing the client bundle size by preprocessing data like markdown without having to expose the dependency to the end-user.<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'nullstack'<\\/span><span class=\"token punctuation\">;<\\/span>\n<span class=\"token keyword\">import<\\/span> <span class=\"token punctuation\">{<\\/span>readFileSync<span class=\"token punctuation\">}<\\/span> <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'fs'<\\/span><span class=\"token punctuation\">;<\\/span>\n<span class=\"token keyword\">import<\\/span> <span class=\"token punctuation\">{<\\/span>Remarkable<span class=\"token punctuation\">}<\\/span> <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'remarkable'<\\/span><span class=\"token punctuation\">;<\\/span>\n\n<span class=\"token keyword\">class<\\/span> <span class=\"token class-name\">Application<\\/span> <span class=\"token keyword\">extends<\\/span> <span class=\"token class-name\">Nullstack<\\/span> <span class=\"token punctuation\">{<\\/span>\n\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">getTasks<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">const<\\/span> readme <span class=\"token operator\">=<\\/span> <span class=\"token function\">readFileSync<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token string\">'README.md'<\\/span><span class=\"token punctuation\">,<\\/span> <span class=\"token string\">'utf-8'<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n    <span class=\"token keyword\">return<\\/span> <span class=\"token keyword\">new<\\/span> <span class=\"token class-name\">Remarkable<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">.<\\/span><span class=\"token function\">render<\\/span><span class=\"token punctuation\">(<\\/span>readme<span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// ...<\\/span>\n\n<span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token keyword\">export<\\/span> <span class=\"token keyword\">default<\\/span> Application<span class=\"token punctuation\">;<\\/span>\n<\\/code><\\/pre>\n<h2 id=\"security\"><a href=\"#security\">Security<\\/a><\\/h2><p>Keep in mind that every server function is similar to an Express route in API and must be coded without depending on view logic for security.<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'nullstack'<\\/span><span class=\"token punctuation\">;<\\/span>\n\n<span class=\"token keyword\">class<\\/span> <span class=\"token class-name\">Component<\\/span> <span class=\"token keyword\">extends<\\/span> <span class=\"token class-name\">Nullstack<\\/span> <span class=\"token punctuation\">{<\\/span>\n\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">getCount<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span>request<span class=\"token punctuation\">,<\\/span> count<span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">if<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token operator\">!<\\/span>request<span class=\"token punctuation\">.<\\/span>session<span class=\"token punctuation\">.<\\/span>user<span class=\"token punctuation\">)<\\/span> <span class=\"token keyword\">return<\\/span> <span class=\"token number\">0<\\/span><span class=\"token punctuation\">;<\\/span>\n    <span class=\"token keyword\">return<\\/span> count<span class=\"token punctuation\">;<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// ...<\\/span>\n\n<span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token keyword\">export<\\/span> <span class=\"token keyword\">default<\\/span> Component<span class=\"token punctuation\">;<\\/span>\n<\\/code><\\/pre>\n<p>Server functions with the name starting with &quot;_&quot; do not generate an API endpoint and do not have access to the context by default to avoid malicious API calls.<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'nullstack'<\\/span><span class=\"token punctuation\">;<\\/span>\n\n<span class=\"token keyword\">class<\\/span> <span class=\"token class-name\">Component<\\/span> <span class=\"token keyword\">extends<\\/span> <span class=\"token class-name\">Nullstack<\\/span> <span class=\"token punctuation\">{<\\/span>\n\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">_getCount<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span> request <span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">return<\\/span> request<span class=\"token punctuation\">.<\\/span>count<span class=\"token punctuation\">;<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">getDoubleCount<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span> request <span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">if<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token operator\">!<\\/span>request<span class=\"token punctuation\">.<\\/span>session<span class=\"token punctuation\">.<\\/span>user<span class=\"token punctuation\">)<\\/span> <span class=\"token keyword\">return<\\/span> <span class=\"token number\">0<\\/span><span class=\"token punctuation\">;<\\/span>\n    <span class=\"token keyword\">return<\\/span> <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span><span class=\"token function\">_getCount<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">{<\\/span> request <span class=\"token punctuation\">}<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token operator\">*<\\/span> <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span><span class=\"token function\">_getCount<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">{<\\/span> request <span class=\"token punctuation\">}<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// ...<\\/span>\n\n<span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token keyword\">export<\\/span> <span class=\"token keyword\">default<\\/span> Component<span class=\"token punctuation\">;<\\/span>\n<\\/code><\\/pre>\n<blockquote>\n<p>💡 Server functions are not exposed to the client.<\\/p>\n<\\/blockquote>\n<blockquote>\n<p>✨ Learn more about the <a href=\"/jsx-elements\">jsx elements<\\/a>.<\\/p>\n<\\/blockquote>\n<h2 id=\"reserved-words\"><a href=\"#reserved-words\">Reserved words<\\/a><\\/h2><p>Server function names cannot collide with instance method names from the current class or its parent classes.<\\/p>\n<p>The following words cannot be used in server functions:<\\/p>\n<ul>\n<li><code>prepare<\\/code><\\/li>\n<li><code>initiate<\\/code><\\/li>\n<li><code>launch<\\/code><\\/li>\n<li><code>hydrate<\\/code><\\/li>\n<li><code>update<\\/code><\\/li>\n<li><code>terminate<\\/code><\\/li>\n<\\/ul>\n<p>Server functions named <code>start<\\/code> will not generate an API endpoint and can only be called by other server functions.<\\/p>\n<h2 id=\"reserved-http-method-prefixes\"><a href=\"#reserved-http-method-prefixes\">Reserved HTTP method prefixes<\\/a><\\/h2><p>Server functions declared with their names starting with HTTP verbs will be executed accordingly to the respective HTTP method.\nSupported verbs are:<\\/p>\n<ul>\n<li><code>get<\\/code><\\/li>\n<li><code>post<\\/code><\\/li>\n<li><code>put<\\/code><\\/li>\n<li><code>patch<\\/code><\\/li>\n<li><code>delete<\\/code><\\/li>\n<\\/ul>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">\"nullstack\"<\\/span><span class=\"token punctuation\">;<\\/span>\n\n<span class=\"token keyword\">class<\\/span> <span class=\"token class-name\">HTTPVerbs<\\/span> <span class=\"token keyword\">extends<\\/span> <span class=\"token class-name\">Nullstack<\\/span> <span class=\"token punctuation\">{<\\/span>\n  <span class=\"token comment\">// this is a GET request<\\/span>\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">getUserById<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span> id <span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token comment\">// ...<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// this is a POST request<\\/span>\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">postUser<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span> data <span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token comment\">// ...<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// this is a PUT request<\\/span>\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">putUserById<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span> id<span class=\"token punctuation\">,<\\/span> data <span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token comment\">// ...<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// this is a PATCH request<\\/span>\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">patchUserById<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span> id<span class=\"token punctuation\">,<\\/span> data <span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token comment\">// ...<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// this is a DELETE request<\\/span>\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">deleteUserById<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span> id <span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token comment\">// ...<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// ...<\\/span>\n<span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token keyword\">export<\\/span> <span class=\"token keyword\">default<\\/span> HTTPVerbs<span class=\"token punctuation\">;<\\/span>\n<\\/code><\\/pre>\n<blockquote>\n<p>💡 Server functions without those special prefixes will be defaulted to a POST request.<\\/p>\n<\\/blockquote>\n<blockquote>\n<p>🔥 Be mindful to the specification of each HTTP method. For example, GET requests have a limit of 2kb of data that can be passed as a parameter, so attempting to send an entire object to a server function may result in failure.<\\/p>\n<\\/blockquote>\n<h2 id=\"performance-considerations\"><a href=\"#performance-considerations\">Performance Considerations<\\/a><\\/h2><p>Server functions are just API endpoints in the end of the day. Be mindful of this when making function calls, and try to keep the payload as small as possible.<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'nullstack'<\\/span><span class=\"token punctuation\">;<\\/span>\n\n<span class=\"token keyword\">class<\\/span> <span class=\"token class-name\">Component<\\/span> <span class=\"token keyword\">extends<\\/span> <span class=\"token class-name\">Nullstack<\\/span> <span class=\"token punctuation\">{<\\/span>\n\n  <span class=\"token comment\">// ✅ do this <\\/span>\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">getUserProfileById<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span> id <span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token comment\">// ...<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token keyword\">async<\\/span> <span class=\"token function\">hydrate<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span>profile <span class=\"token operator\">=<\\/span> <span class=\"token keyword\">await<\\/span> <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span><span class=\"token function\">getUserProfileById<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">{<\\/span><span class=\"token literal-property property\">id<\\/span><span class=\"token operator\">:<\\/span> <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span>user<span class=\"token punctuation\">.<\\/span>id<span class=\"token punctuation\">}<\\/span><span class=\"token punctuation\">)<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// 🚫 do not do this <\\/span>\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">getUserProfile<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span> user <span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">const<\\/span> id <span class=\"token operator\">=<\\/span> user<span class=\"token punctuation\">.<\\/span>id\n    <span class=\"token comment\">// ...<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token keyword\">async<\\/span> <span class=\"token function\">hydrate<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span>profile <span class=\"token operator\">=<\\/span> <span class=\"token keyword\">await<\\/span> <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span><span class=\"token function\">getUserProfile<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">{<\\/span><span class=\"token literal-property property\">user<\\/span><span class=\"token operator\">:<\\/span> <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span>user<span class=\"token punctuation\">}<\\/span><span class=\"token punctuation\">)<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// ...<\\/span>\n\n<span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token keyword\">export<\\/span> <span class=\"token keyword\">default<\\/span> Component<span class=\"token punctuation\">;<\\/span>\n<\\/code><\\/pre>\n<h2 id=\"caveats\"><a href=\"#caveats\">Caveats<\\/a><\\/h2><p>Automatically generated API endpoints are not meant to be used by 3rd-party apps.<\\/p>\n<p>The URL and implementation may change between versions of Nullstack.<\\/p>\n<p>Server functions endpoints are based on file path and function name, changing those might cause backwards compatibility problems in some scenarios.<\\/p>\n<blockquote>\n<p>✨ If you want to build an API, learn more about <a href=\"/server-request-and-response\">how to create an API with Nullstack<\\/a>.<\\/p>\n<\\/blockquote>\n","persistent":true,"locale":"en-US","i18n":{"lead":"Have any questions or suggestions?","cta":"Join our Discord","next":"Next Step","learn":"Learn more about"},"description":"Server functions are specialized microservices that at transpile time are converted into API entry points","topics":[{"title":"About Nullstack","links":[{"title":"What is Nullstack?","href":"/what-is-nullstack"},{"title":"Getting started","href":"/getting-started"}]},{"title":"Core Features","links":[{"title":"Stateless Components","href":"/stateless-components"},{"title":"Stateful components","href":"/stateful-components"},{"title":"Full stack lifecycle","href":"/full-stack-lifecycle"},{"title":"Server functions","href":"/server-functions"},{"title":"Context","href":"/context"},{"title":"Two-way bindings","href":"/two-way-bindings"},{"title":"JSX elements","href":"/jsx-elements"},{"title":"Refs","href":"/refs"},{"title":"Styles","href":"/styles"},{"title":"Persistent Components","href":"/persistent-components"}]},{"title":"Context Keys","links":[{"title":"Routes and params","href":"/routes-and-params"},{"title":"Context data","href":"/context-data"},{"title":"Context instances","href":"/context-instances"},{"title":"Context environment","href":"/context-environment"},{"title":"Context page","href":"/context-page"},{"title":"Context project","href":"/context-project"},{"title":"Context settings","href":"/context-settings"},{"title":"Context secrets","href":"/context-secrets"},{"title":"Server request and response","href":"/server-request-and-response"},{"title":"Service Worker","href":"/service-worker"}]},{"title":"Advanced concepts","links":[{"title":"Proxy","href":"/proxy"},{"title":"Application Startup","href":"/application-startup"},{"title":"Script runner","href":"/script-runner"},{"title":"How to customize Webpack","href":"/how-to-customize-webpack"},{"title":"Transpilation and Security","href":"/transpilation-and-security"},{"title":"TypeScript","href":"/typescript"}]},{"title":"Build Modes","links":[{"title":"Server-side rendering","href":"/server-side-rendering"},{"title":"Static site generation","href":"/static-site-generation"},{"title":"Single page applications","href":"/single-page-applications"}]},{"title":"Other","links":[{"title":"Nullstack Logo","href":"/nullstack-logo"},{"title":"How to deploy","href":"/how-to-deploy-a-nullstack-application"}]}]},"GoogleAnalytics/0-0-0-19":{"persistent":false},"Loader/0-0-0-21":{"persistent":false},"Footer/0-0-0-22":{"persistent":false,"locale":"en-US","i18n":{"links":[{"title":"YouTube","href":"https://www.youtube.com/channel/UCUNPaxoppH3lu6JTrUX78Ww"},{"title":"Twitter","href":"https://twitter.com/nullstackapp"},{"title":"GitHub","href":"https://github.com/nullstack"}],"star":{"story":"Want to show your love and help us spread the word?","action":"Leave a star on GitHub"}}}},"page":{"image":"/image-1200x630.png","status":200,"locale":"en-US","title":"Server Functions - Nullstack","description":"Server functions are specialized microservices that at transpile time are converted into API entry points"}}