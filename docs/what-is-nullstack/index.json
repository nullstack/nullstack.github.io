{"instances":{"application":{"persistent":false},"Header/0-0-0-0":{"expanded":false,"persistent":false,"locale":"en-US","i18n":{"home":{"title":"Nullstack","href":"/"},"links":[{"title":"What is Nullstack?","href":"/what-is-nullstack"},{"title":"Documentation","href":"/getting-started"},{"title":"Examples","href":"/examples"},{"title":"Contributors","href":"/contributors"},{"title":"F.A.Q","href":"/frequently-asked-questions"},{"title":"Waifu","href":"/waifu"}],"menu":{"title":"Toggle Menu"},"action":{"title":"Get Started","href":"/getting-started"},"search":{"title":"Search [ctrl + k]"},"language":{"title":"PortuguÃªs","href":"/pt-br"},"mode":{"dark":"Night Mode","light":"Day Mode"}}},"Article/0-0-0-18/what-is-nullstack":{"title":"What is Nullstack?","html":"<p>Nullstack is a full stack web framework that allows features with front and back end to be created in a single component, We call it &quot;feature-driven&quot; components. Nullstack makes coding fun and simple because you don't think of big architectures, instead you just have small composable features.<\\/p>\n<p>It's easier to show than tell: Let's go over a component that lets you see the number of likes of a post in 5 minutes togheter!<\\/p>\n<p>In your head you are already thinking of APIs and architecture, but all your users want is to see information from the database and in the screen, so lets do just that:<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'nullstack'<\\/span>\n\n<span class=\"token keyword\">class<\\/span> <span class=\"token class-name\">LikeButton<\\/span> <span class=\"token keyword\">extends<\\/span> <span class=\"token class-name\">Nullstack<\\/span> <span class=\"token punctuation\">{<\\/span>\n\n  <span class=\"token comment\">// instance variables are mutable and reactive<\\/span>\n  <span class=\"token comment\">// you can use vanilla JS instead of idiomatic hooks<\\/span>\n  likes <span class=\"token operator\">=<\\/span> <span class=\"token number\">0<\\/span>\n\n  <span class=\"token comment\">// static async functions run in the server<\\/span>\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">getNumberOfLikes<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span> database<span class=\"token punctuation\">,<\\/span> post <span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token comment\">// database is a user defined context key<\\/span>\n    <span class=\"token keyword\">const<\\/span> sql <span class=\"token operator\">=<\\/span> <span class=\"token string\">'SELECT COUNT(*) FROM likes WHERE post = ?'<\\/span>\n    <span class=\"token keyword\">const<\\/span> <span class=\"token punctuation\">[<\\/span>likes<span class=\"token punctuation\">]<\\/span> <span class=\"token operator\">=<\\/span> <span class=\"token keyword\">await<\\/span> database<span class=\"token punctuation\">.<\\/span><span class=\"token function\">query<\\/span><span class=\"token punctuation\">(<\\/span>sql<span class=\"token punctuation\">,<\\/span> <span class=\"token punctuation\">[<\\/span>post<span class=\"token punctuation\">]<\\/span><span class=\"token punctuation\">)<\\/span>\n    <span class=\"token keyword\">return<\\/span> likes\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token keyword\">async<\\/span> <span class=\"token function\">initiate<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span> post <span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token comment\">// you can use the returned value of server functions<\\/span>\n    <span class=\"token comment\">// as if it was a regular function<\\/span>\n    <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span>likes <span class=\"token operator\">=<\\/span> <span class=\"token keyword\">await<\\/span> <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span><span class=\"token function\">getNumberOfLikes<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">{<\\/span> post <span class=\"token punctuation\">}<\\/span><span class=\"token punctuation\">)<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// JSX follows the HTML standards<\\/span>\n  <span class=\"token function\">render<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">return<\\/span> <span class=\"token punctuation\">(<\\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span>div<\\/span> <span class=\"token attr-name\">class<\\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\\/span><span class=\"token punctuation\">\"<\\/span>likes-counter<span class=\"token punctuation\">\"<\\/span><\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span>span<\\/span><span class=\"token punctuation\">><\\/span><\\/span> <span class=\"token punctuation\">{<\\/span><span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span>likes<span class=\"token punctuation\">}<\\/span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\\/span>span<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\\/span>div<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n    <span class=\"token punctuation\">)<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token punctuation\">}<\\/span>\n<\\/code><\\/pre>\n<p>That was easy, this is a feature, everything else is an imaginary problem. But that was actually too easy, what if we want to write data to the database instead of just reading on page load?<\\/p>\n<p>Let's change that span into a button and check the acceptance criteria for our feature. At any moment you can choose to run functions in the server and Nullstack will generate at compile time a microservice with an API just for that function.<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'nullstack'<\\/span>\n\n<span class=\"token keyword\">class<\\/span> <span class=\"token class-name\">LikeButton<\\/span> <span class=\"token keyword\">extends<\\/span> <span class=\"token class-name\">Nullstack<\\/span> <span class=\"token punctuation\">{<\\/span>\n\n  <span class=\"token comment\">// ...<\\/span>\n\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">createLike<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span> request<span class=\"token punctuation\">,<\\/span> database<span class=\"token punctuation\">,<\\/span> post <span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">const<\\/span> user <span class=\"token operator\">=<\\/span> request<span class=\"token punctuation\">.<\\/span>user<span class=\"token punctuation\">.<\\/span>id\n    <span class=\"token keyword\">const<\\/span> sql <span class=\"token operator\">=<\\/span> <span class=\"token string\">'INSERT INTO likes (user, post) VALUES (?, ?)'<\\/span>\n    <span class=\"token keyword\">await<\\/span> database<span class=\"token punctuation\">.<\\/span><span class=\"token function\">query<\\/span><span class=\"token punctuation\">(<\\/span>sql<span class=\"token punctuation\">,<\\/span> <span class=\"token punctuation\">[<\\/span>user<span class=\"token punctuation\">,<\\/span> post<span class=\"token punctuation\">]<\\/span><span class=\"token punctuation\">)<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// every client function receives the props<\\/span>\n  <span class=\"token keyword\">async<\\/span> <span class=\"token function\">like<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span> post <span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token comment\">// you can mutate variables and the dom reflect the changes<\\/span>\n    <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span>likes<span class=\"token operator\">++<\\/span>\n    <span class=\"token comment\">// this is calling an api endpoint under the hood<\\/span>\n    <span class=\"token keyword\">await<\\/span> <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span><span class=\"token function\">createLike<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">{<\\/span> post <span class=\"token punctuation\">}<\\/span><span class=\"token punctuation\">)<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token comment\">// JSX follows the HTML standards<\\/span>\n  <span class=\"token function\">render<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">return<\\/span> <span class=\"token punctuation\">(<\\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span>div<\\/span> <span class=\"token attr-name\">class<\\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\\/span><span class=\"token punctuation\">\"<\\/span>likes-counter<span class=\"token punctuation\">\"<\\/span><\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span>button<\\/span> <span class=\"token attr-name\">onclick<\\/span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=<\\/span><span class=\"token punctuation\">{<\\/span><span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span>like<span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n          <span class=\"token punctuation\">{<\\/span><span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span>likes<span class=\"token punctuation\">}<\\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\\/span>button<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\\/span>div<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n    <span class=\"token punctuation\">)<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token punctuation\">}<\\/span>\n<\\/code><\\/pre>\n<p>This example is small but gives you a glimpse at the beauty of Nullstack, every feature is just a component, and features can be composed as you want. This component can go inside a post component.<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">function<\\/span> <span class=\"token function\">Post<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span> post <span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n  <span class=\"token keyword\">return<\\/span> <span class=\"token punctuation\">(<\\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span>div<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span>article<\\/span><span class=\"token punctuation\">><\\/span><\\/span> <span class=\"token punctuation\">{<\\/span>post<span class=\"token punctuation\">.<\\/span>content<span class=\"token punctuation\">}<\\/span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\\/span>article<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span><span class=\"token class-name\">LikeButton<\\/span><\\/span> <span class=\"token attr-name\">post<\\/span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=<\\/span><span class=\"token punctuation\">{<\\/span>post<span class=\"token punctuation\">.<\\/span>id<span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\\/span>div<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n  <span class=\"token punctuation\">)<\\/span>\n<span class=\"token punctuation\">}<\\/span>\n<\\/code><\\/pre>\n<p>You can even have entire applications as components inside another application.<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">function<\\/span> <span class=\"token function\">Application<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n  <span class=\"token keyword\">return<\\/span> <span class=\"token punctuation\">(<\\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span>div<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span><span class=\"token class-name\">Blog<\\/span><\\/span> <span class=\"token attr-name\">route<\\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\\/span><span class=\"token punctuation\">\"<\\/span>/blog/*<span class=\"token punctuation\">\"<\\/span><\\/span><span class=\"token punctuation\">><\\/span><\\/span>dssxs<span class=\"token operator\">-<\\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span><span class=\"token class-name\">Ecommerce<\\/span><\\/span> <span class=\"token attr-name\">route<\\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\\/span><span class=\"token punctuation\">\"<\\/span>/shop/*<span class=\"token punctuation\">\"<\\/span><\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span><span class=\"token class-name\">Home<\\/span><\\/span> <span class=\"token attr-name\">route<\\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\\/span><span class=\"token punctuation\">\"<\\/span>/<span class=\"token punctuation\">\"<\\/span><\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\\/span>div<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n  <span class=\"token punctuation\">)<\\/span>\n<span class=\"token punctuation\">}<\\/span>\n<\\/code><\\/pre>\n<p>Any developer can jump right into your project with just JavaScript knowledge and be productive at day 0 because they don't need to understand an overly complicated architecture or have to deal with a giant monolith. Nullstack apps are just isolated small features that are fun to code.<\\/p>\n","persistent":true,"locale":"en-US","i18n":{"lead":"Have any questions or suggestions?","cta":"Join our Discord","next":"Next Step","learn":"Learn more about"},"description":"Nullstack is a full stack web framework that allows features with front and back end to be created in a single component, We call it \"feature-driven\" components. Nullstack makes coding fun and simple because you don't think of big architectures, instead you just have small composable features.","topics":[{"title":"About Nullstack","links":[{"title":"What is Nullstack?","href":"/what-is-nullstack"},{"title":"Getting started","href":"/getting-started"}]},{"title":"Core Features","links":[{"title":"Stateless Components","href":"/stateless-components"},{"title":"Stateful components","href":"/stateful-components"},{"title":"Full stack lifecycle","href":"/full-stack-lifecycle"},{"title":"Server functions","href":"/server-functions"},{"title":"Context","href":"/context"},{"title":"Two-way bindings","href":"/two-way-bindings"},{"title":"JSX elements","href":"/jsx-elements"},{"title":"Refs","href":"/refs"},{"title":"Styles","href":"/styles"},{"title":"Persistent Components","href":"/persistent-components"}]},{"title":"Context Keys","links":[{"title":"Routes and params","href":"/routes-and-params"},{"title":"Context data","href":"/context-data"},{"title":"Context instances","href":"/context-instances"},{"title":"Context environment","href":"/context-environment"},{"title":"Context page","href":"/context-page"},{"title":"Context project","href":"/context-project"},{"title":"Context settings","href":"/context-settings"},{"title":"Context secrets","href":"/context-secrets"},{"title":"Server request and response","href":"/server-request-and-response"},{"title":"Service Worker","href":"/service-worker"}]},{"title":"Advanced concepts","links":[{"title":"Proxy","href":"/proxy"},{"title":"Application Startup","href":"/application-startup"},{"title":"Script runner","href":"/script-runner"},{"title":"How to customize Webpack","href":"/how-to-customize-webpack"},{"title":"Transpilation and Security","href":"/transpilation-and-security"},{"title":"TypeScript","href":"/typescript"}]},{"title":"Build Modes","links":[{"title":"Server-side rendering","href":"/server-side-rendering"},{"title":"Static site generation","href":"/static-site-generation"},{"title":"Single page applications","href":"/single-page-applications"}]},{"title":"Other","links":[{"title":"Nullstack Logo","href":"/nullstack-logo"},{"title":"How to deploy","href":"/how-to-deploy-a-nullstack-application"}]}]},"GoogleAnalytics/0-0-0-19":{"persistent":false},"Loader/0-0-0-21":{"persistent":false},"Footer/0-0-0-22":{"persistent":false,"locale":"en-US","i18n":{"links":[{"title":"YouTube","href":"https://www.youtube.com/channel/UCUNPaxoppH3lu6JTrUX78Ww"},{"title":"Twitter","href":"https://twitter.com/nullstackapp"},{"title":"GitHub","href":"https://github.com/nullstack"}],"star":{"story":"Want to show your love and help us spread the word?","action":"Leave a star on GitHub"}}}},"page":{"image":"/image-1200x630.png","status":200,"locale":"en-US","title":"What is Nullstack? - Nullstack","description":"Nullstack is a full stack web framework that allows features with front and back end to be created in a single component, We call it \"feature-driven\" components. Nullstack makes coding fun and simple because you don't think of big architectures, instead you just have small composable features."}}