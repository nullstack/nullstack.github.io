{"instances":{"application":{"persistent":false},"Header/0-0-0-0":{"expanded":false,"persistent":false,"locale":"en-US","i18n":{"home":{"title":"Nullstack","href":"/"},"links":[{"title":"What is Nullstack?","href":"/what-is-nullstack"},{"title":"Documentation","href":"/getting-started"},{"title":"Examples","href":"/examples"},{"title":"Contributors","href":"/contributors"},{"title":"F.A.Q","href":"/frequently-asked-questions"},{"title":"Waifu","href":"/waifu"}],"menu":{"title":"Toggle Menu"},"action":{"title":"Get Started","href":"/getting-started"},"search":{"title":"Search [ctrl + k]"},"language":{"title":"PortuguÃªs","href":"/pt-br"},"mode":{"dark":"Night Mode","light":"Day Mode"}}},"Article/0-0-0-18/service-worker":{"title":"Context Service Worker","html":"<ul>\n<li>Type: <code>object<\\/code><\\/li>\n<li>Origin: <a href=\"/context#----nullstack-context\">Nullstack Context<\\/a><\\/li>\n<li>Availability: server/client<\\/li>\n<li><strong>readwrite<\\/strong> in <strong>server<\\/strong> context<\\/li>\n<li><strong>readonly<\\/strong> in <strong>client<\\/strong> context<\\/li>\n<\\/ul>\n<p>It gives you granular control of your PWA behavior.<\\/p>\n<p><code>worker<\\/code> keys will be used to generate the service worker file and should be set during the <a href=\"/application-startup\">application startup<\\/a>.<\\/p>\n<p>The following keys are available in the object during the startup:<\\/p>\n<ul>\n<li><strong>enabled<\\/strong>: <code>boolean<\\/code><\\/li>\n<li><strong>preload<\\/strong>: <code>string array<\\/code> (relative paths)<\\/li>\n<li><strong>headers<\\/strong>: <code>object<\\/code><\\/li>\n<li><strong>cdn<\\/strong>: <code>string<\\/code> (absolute url)<\\/li>\n<li><strong>api<\\/strong>: <code>string<\\/code> (absolute url)<\\/li>\n<li><strong>protocol<\\/strong>: <code>string<\\/code> (http or https)<\\/li>\n<\\/ul>\n<p>The <code>enabled<\\/code> key defines if the service worker will be automatically registered by Nullstack.<\\/p>\n<p>By default <code>enabled<\\/code> is set to <code>true<\\/code> on production mode and <code>false<\\/code> on development mode.<\\/p>\n<p><code>preload<\\/code> is an array of paths that will be cached when the service worker is installed.<\\/p>\n<p>The assets required to start the application will be preloaded automatically, and you should configure only the extra pages you want to have available offline.<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> <span class=\"token punctuation\">{<\\/span> readdirSync <span class=\"token punctuation\">}<\\/span> <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'fs'<\\/span><span class=\"token punctuation\">;<\\/span>\n<span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">\"nullstack\"<\\/span><span class=\"token punctuation\">;<\\/span>\n<span class=\"token keyword\">import<\\/span> path <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'path'<\\/span><span class=\"token punctuation\">;<\\/span>\n<span class=\"token keyword\">import<\\/span> Application <span class=\"token keyword\">from<\\/span> <span class=\"token string\">\"./src/Application\"<\\/span><span class=\"token punctuation\">;<\\/span>\n\n<span class=\"token keyword\">const<\\/span> context <span class=\"token operator\">=<\\/span> Nullstack<span class=\"token punctuation\">.<\\/span><span class=\"token function\">start<\\/span><span class=\"token punctuation\">(<\\/span>Application<span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n\n<span class=\"token keyword\">const<\\/span> <span class=\"token punctuation\">{<\\/span> worker <span class=\"token punctuation\">}<\\/span> <span class=\"token operator\">=<\\/span> context<span class=\"token punctuation\">;<\\/span>\n\n<span class=\"token keyword\">const<\\/span> articles <span class=\"token operator\">=<\\/span> <span class=\"token function\">readdirSync<\\/span><span class=\"token punctuation\">(<\\/span>path<span class=\"token punctuation\">.<\\/span><span class=\"token function\">join<\\/span><span class=\"token punctuation\">(<\\/span>__dirname<span class=\"token punctuation\">,<\\/span> <span class=\"token string\">'../i18n/en-US'<\\/span><span class=\"token punctuation\">,<\\/span> <span class=\"token string\">'articles'<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\nworker<span class=\"token punctuation\">.<\\/span>preload <span class=\"token operator\">=<\\/span> <span class=\"token punctuation\">[<\\/span>\n  <span class=\"token operator\">...<\\/span>articles<span class=\"token punctuation\">.<\\/span><span class=\"token function\">map<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\">article<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token operator\">=><\\/span> <span class=\"token string\">'/'<\\/span> <span class=\"token operator\">+<\\/span> article<span class=\"token punctuation\">.<\\/span><span class=\"token function\">replace<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token string\">'.md'<\\/span><span class=\"token punctuation\">,<\\/span> <span class=\"token string\">''<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">,<\\/span>\n  <span class=\"token operator\">...<\\/span>illustrations<span class=\"token punctuation\">.<\\/span><span class=\"token function\">map<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\">illustration<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token operator\">=><\\/span> <span class=\"token string\">'/illustrations/'<\\/span> <span class=\"token operator\">+<\\/span> illustration<span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">,<\\/span>\n  <span class=\"token string\">'/arrow.webp'<\\/span><span class=\"token punctuation\">,<\\/span>\n  <span class=\"token string\">'/stars.webp'<\\/span><span class=\"token punctuation\">,<\\/span>\n  <span class=\"token string\">'/documentation'<\\/span><span class=\"token punctuation\">,<\\/span>\n  <span class=\"token string\">'/components'<\\/span>\n  <span class=\"token comment\">// ...<\\/span>\n<span class=\"token punctuation\">]<\\/span>\n\n<span class=\"token keyword\">export<\\/span> <span class=\"token keyword\">default<\\/span> context<span class=\"token punctuation\">;<\\/span>\n<\\/code><\\/pre>\n<blockquote>\n<p>ðŸ’¡ The example above is extracted from this repository and allows the documentation to be fully accessible offline.<\\/p>\n<\\/blockquote>\n<p>The following keys are available as <strong>readonly<\\/strong> in the client context:<\\/p>\n<ul>\n<li><strong>enabled<\\/strong>: <code>boolean<\\/code><\\/li>\n<li><strong>preload<\\/strong>: <code>string array<\\/code> (relative paths)<\\/li>\n<li><strong>online<\\/strong>: <code>boolean<\\/code><\\/li>\n<li><strong>fetching<\\/strong>: <code>boolean<\\/code><\\/li>\n<li><strong>responsive<\\/strong>: <code>boolean<\\/code><\\/li>\n<li><strong>installation<\\/strong>: <code>BeforeInstallPromptEvent<\\/code><\\/li>\n<li><strong>registration<\\/strong>: <code>ServiceWorkerRegistration<\\/code><\\/li>\n<li><strong>queues<\\/strong>: <code>object<\\/code><\\/li>\n<\\/ul>\n<p>The following keys are available as <strong>readwrite<\\/strong> in the client context:<\\/p>\n<ul>\n<li><strong>headers<\\/strong>: <code>object<\\/code><\\/li>\n<\\/ul>\n<p>The <code>responsive<\\/code> key determines if the application has all the responses it needs to render the current page.<\\/p>\n<p>Nullstack will try to keep your application responsive as long as possible and set the key to <code>false<\\/code> only when there are no ways of retrieving any response from the network or offline according to the fetch strategy for the <a href=\"/context-environment\">environment<\\/a>.<\\/p>\n<p>The <code>online<\\/code> key will listen for network events and rerender the application when <code>navigator.onLine<\\/code> value changes.<\\/p>\n<p>When the application is back online Nullstack will try to make the application responsive again and rerender if necessary.<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'nullstack'<\\/span><span class=\"token punctuation\">;<\\/span>\n<span class=\"token comment\">// ...<\\/span>\n\n<span class=\"token keyword\">class<\\/span> <span class=\"token class-name\">Application<\\/span> <span class=\"token keyword\">extends<\\/span> <span class=\"token class-name\">Nullstack<\\/span> <span class=\"token punctuation\">{<\\/span>\n \n  <span class=\"token comment\">// ...<\\/span>\n\n  <span class=\"token function\">render<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span>worker<span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">if<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token operator\">!<\\/span>worker<span class=\"token punctuation\">.<\\/span>responsive<span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n      <span class=\"token keyword\">return<\\/span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span><span class=\"token class-name\">OfflineWarning<\\/span><\\/span> <span class=\"token punctuation\">/><\\/span><\\/span>\n    <span class=\"token punctuation\">}<\\/span>\n    <span class=\"token keyword\">return<\\/span> <span class=\"token punctuation\">(<\\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span>main<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span><span class=\"token class-name\">Home<\\/span><\\/span> <span class=\"token attr-name\">route<\\/span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=<\\/span><span class=\"token punctuation\">\"<\\/span>/<span class=\"token punctuation\">\"<\\/span><\\/span> <span class=\"token punctuation\">/><\\/span><\\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\\/span>main<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n    <span class=\"token punctuation\">)<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token punctuation\">}<\\/span>\n<\\/code><\\/pre>\n<p>You can access the current service worker <strong>registration<\\/strong> and <strong>installation<\\/strong> from the <code>worker<\\/code> key to control the flow of your PWA.<\\/p>\n<p>The <code>registration<\\/code> key refers to the service worker registration and will be only available once the registration process is complete.<\\/p>\n<p>The <code>installation<\\/code> key refers to the deferred installation prompt event and will only be available if the <code>beforeinstallprompt<\\/code> event is triggered.<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'nullstack'<\\/span><span class=\"token punctuation\">;<\\/span>\n\n<span class=\"token keyword\">class<\\/span> <span class=\"token class-name\">PWAInstaller<\\/span> <span class=\"token keyword\">extends<\\/span> <span class=\"token class-name\">Nullstack<\\/span> <span class=\"token punctuation\">{<\\/span>\n\n  installed <span class=\"token operator\">=<\\/span> <span class=\"token boolean\">false<\\/span><span class=\"token punctuation\">;<\\/span>\n  hidden <span class=\"token operator\">=<\\/span> <span class=\"token boolean\">false<\\/span><span class=\"token punctuation\">;<\\/span>\n\n  <span class=\"token keyword\">async<\\/span> <span class=\"token function\">prompt<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span>worker<span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">try<\\/span> <span class=\"token punctuation\">{<\\/span>\n      worker<span class=\"token punctuation\">.<\\/span>installation<span class=\"token punctuation\">.<\\/span><span class=\"token function\">prompt<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n      <span class=\"token keyword\">const<\\/span> <span class=\"token punctuation\">{<\\/span>outcome<span class=\"token punctuation\">}<\\/span> <span class=\"token operator\">=<\\/span> <span class=\"token keyword\">await<\\/span> worker<span class=\"token punctuation\">.<\\/span>installation<span class=\"token punctuation\">.<\\/span>userChoice<span class=\"token punctuation\">;<\\/span>\n      <span class=\"token keyword\">if<\\/span> <span class=\"token punctuation\">(<\\/span>outcome <span class=\"token operator\">===<\\/span> <span class=\"token string\">'accepted'<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n        console<span class=\"token punctuation\">.<\\/span><span class=\"token function\">log<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token string\">'User accepted the A2HS prompt'<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n      <span class=\"token punctuation\">}<\\/span> <span class=\"token keyword\">else<\\/span> <span class=\"token punctuation\">{<\\/span>\n        console<span class=\"token punctuation\">.<\\/span><span class=\"token function\">log<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token string\">'User dismissed the A2HS prompt'<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n      <span class=\"token punctuation\">}<\\/span>\n    <span class=\"token punctuation\">}<\\/span> <span class=\"token keyword\">finally<\\/span> <span class=\"token punctuation\">{<\\/span>\n      <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span>hidden <span class=\"token operator\">=<\\/span> <span class=\"token boolean\">true<\\/span><span class=\"token punctuation\">;<\\/span>\n    <span class=\"token punctuation\">}<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n  \n  <span class=\"token function\">render<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span>worker<span class=\"token punctuation\">,<\\/span> project<span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">if<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span>hidden<span class=\"token punctuation\">)<\\/span> <span class=\"token keyword\">return<\\/span> <span class=\"token boolean\">false<\\/span><span class=\"token punctuation\">;<\\/span>\n    <span class=\"token keyword\">if<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token operator\">!<\\/span>worker<span class=\"token punctuation\">.<\\/span>installation<span class=\"token punctuation\">)<\\/span> <span class=\"token keyword\">return<\\/span> <span class=\"token boolean\">false<\\/span><span class=\"token punctuation\">;<\\/span>\n    <span class=\"token keyword\">return<\\/span> <span class=\"token punctuation\">(<\\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span>div<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span>img<\\/span> <span class=\"token attr-name\">src<\\/span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=<\\/span><span class=\"token punctuation\">{<\\/span>project<span class=\"token punctuation\">.<\\/span>favicon<span class=\"token punctuation\">}<\\/span><\\/span> <span class=\"token punctuation\">/><\\/span><\\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span>p<\\/span><span class=\"token punctuation\">><\\/span><\\/span> Do you want to add <span class=\"token punctuation\">{<\\/span>project<span class=\"token punctuation\">.<\\/span>name<span class=\"token punctuation\">}<\\/span> to your home screen<span class=\"token operator\">?<\\/span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\\/span>p<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span>button<\\/span> <span class=\"token attr-name\">onclick<\\/span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=<\\/span><span class=\"token punctuation\">{<\\/span><span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span>prompt<span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">><\\/span><\\/span> Install <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\\/span>button<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span>button<\\/span> <span class=\"token attr-name\">onclick<\\/span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=<\\/span><span class=\"token punctuation\">{<\\/span><span class=\"token punctuation\">{<\\/span><span class=\"token literal-property property\">hidden<\\/span><span class=\"token operator\">:<\\/span> <span class=\"token boolean\">true<\\/span><span class=\"token punctuation\">}<\\/span><span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">><\\/span><\\/span> Not Now <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\\/span>button<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\\/span>div<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n    <span class=\"token punctuation\">)<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token keyword\">export<\\/span> <span class=\"token keyword\">default<\\/span> PWAInstaller<span class=\"token punctuation\">;<\\/span>\n<\\/code><\\/pre>\n<h2 id=\"loading-screens\"><a href=\"#loading-screens\">Loading Screens<\\/a><\\/h2><p>When a <a href=\"/server-functions\">server function<\\/a> is called <code>fetching<\\/code> will be set to <code>true<\\/code> until the response is resolved.<\\/p>\n<p>When a <a href=\"/server-functions\">server function<\\/a> is called a key with the name of the <a href=\"/server-functions\">server function<\\/a> invoked will be set in the <code>queues<\\/code> object until the response is resolved.<\\/p>\n<p>The key will be an array with all arguments passed to the server function.<\\/p>\n<p>Any key you invoke on the <code>queues<\\/code> object will always return an array instead of <code>undefined<\\/code> for consistency.<\\/p>\n<p>When the server is emulating the client context for <a href=\"/server-side-rendering\">server-side rendering<\\/a>, every key of the <code>queues<\\/code> object will always return an empty array, saving multiple render cycles in performance.<\\/p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'nullstack'<\\/span><span class=\"token punctuation\">;<\\/span>\n\n<span class=\"token keyword\">class<\\/span> <span class=\"token class-name\">Page<\\/span> <span class=\"token keyword\">extends<\\/span> <span class=\"token class-name\">Nullstack<\\/span> <span class=\"token punctuation\">{<\\/span>\n\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">save<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span> valid <span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token comment\">// ...<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token keyword\">async<\\/span> <span class=\"token function\">submit<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">await<\\/span> <span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span><span class=\"token function\">save<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">{<\\/span> <span class=\"token literal-property property\">valid<\\/span><span class=\"token operator\">:<\\/span> <span class=\"token boolean\">true<\\/span> <span class=\"token punctuation\">}<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token function\">render<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span> worker <span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">const<\\/span> loadingValidSave <span class=\"token operator\">=<\\/span> <span class=\"token operator\">!<\\/span><span class=\"token operator\">!<\\/span>worker<span class=\"token punctuation\">.<\\/span>queues<span class=\"token punctuation\">.<\\/span>save\n      <span class=\"token punctuation\">.<\\/span><span class=\"token function\">find<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\">args<\\/span> <span class=\"token operator\">=><\\/span> args<span class=\"token punctuation\">.<\\/span>valid<span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n\n    <span class=\"token keyword\">return<\\/span> <span class=\"token punctuation\">(<\\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span>form<\\/span> <span class=\"token attr-name\">onsubmit<\\/span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=<\\/span><span class=\"token punctuation\">{<\\/span><span class=\"token keyword\">this<\\/span><span class=\"token punctuation\">.<\\/span>submit<span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n        <span class=\"token punctuation\">{<\\/span>worker<span class=\"token punctuation\">.<\\/span>fetching <span class=\"token operator\">&amp;&amp;<\\/span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span>span<\\/span><span class=\"token punctuation\">><\\/span><\\/span> loading<span class=\"token operator\">...<\\/span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\\/span>span<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n        <span class=\"token punctuation\">}<\\/span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;<\\/span>button<\\/span> <span class=\"token attr-name\">disabled<\\/span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=<\\/span><span class=\"token punctuation\">{<\\/span>loadingValidSave<span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n          Save\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\\/span>button<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/<\\/span>form<\\/span><span class=\"token punctuation\">><\\/span><\\/span>\n    <span class=\"token punctuation\">)<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token punctuation\">}<\\/span>\n\n<span class=\"token keyword\">export<\\/span> <span class=\"token keyword\">default<\\/span> Page<span class=\"token punctuation\">;<\\/span>\n<\\/code><\\/pre>\n<h2 id=\"custom-headers\"><a href=\"#custom-headers\">Custom headers<\\/a><\\/h2><p>You can use the <code>headers<\\/code> key to configure the headers that the worker will use when fetching a server function.<\\/p>\n<blockquote>\n<p>ðŸ”¥ Headers will be ignored when a server function is called during the <a href=\"/server-side-rendering\">server-side rendering<\\/a> process.<\\/p>\n<\\/blockquote>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import<\\/span> Nullstack <span class=\"token keyword\">from<\\/span> <span class=\"token string\">'nullstack'<\\/span><span class=\"token punctuation\">;<\\/span>\n\n<span class=\"token keyword\">class<\\/span> <span class=\"token class-name\">LoginPage<\\/span> <span class=\"token keyword\">extends<\\/span> <span class=\"token class-name\">Nullstack<\\/span> <span class=\"token punctuation\">{<\\/span>\n\n  <span class=\"token comment\">// ...<\\/span>\n\n  <span class=\"token keyword\">async<\\/span> <span class=\"token function\">submit<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span>worker<span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token comment\">// ...<\\/span>\n    worker<span class=\"token punctuation\">.<\\/span>headers<span class=\"token punctuation\">[<\\/span><span class=\"token string\">'Authorization'<\\/span><span class=\"token punctuation\">]<\\/span> <span class=\"token operator\">=<\\/span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`<\\/span><span class=\"token string\">Bearer <\\/span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<\\/span>token<span class=\"token interpolation-punctuation punctuation\">}<\\/span><\\/span><span class=\"token template-punctuation string\">`<\\/span><\\/span><span class=\"token punctuation\">;<\\/span>\n    <span class=\"token comment\">// ...<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n\n  <span class=\"token keyword\">static<\\/span> <span class=\"token keyword\">async<\\/span> <span class=\"token function\">authorize<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\"><span class=\"token punctuation\">{<\\/span>request<span class=\"token punctuation\">}<\\/span><\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">const<\\/span> authorization <span class=\"token operator\">=<\\/span> request<span class=\"token punctuation\">.<\\/span>headers<span class=\"token punctuation\">[<\\/span><span class=\"token string\">'Authorization'<\\/span><span class=\"token punctuation\">]<\\/span><span class=\"token punctuation\">;<\\/span>\n    <span class=\"token comment\">// ...<\\/span>\n  <span class=\"token punctuation\">}<\\/span>\n  \n  <span class=\"token comment\">// ...<\\/span>\n\n<span class=\"token punctuation\">}<\\/span>\n\n\n<span class=\"token keyword\">export<\\/span> <span class=\"token keyword\">default<\\/span> LoginPage<span class=\"token punctuation\">;<\\/span>\n<\\/code><\\/pre>\n<blockquote>\n<p>âœ¨ Learn more about the <a href=\"/server-request-and-response\">server request and response<\\/a><\\/p>\n<\\/blockquote>\n<h2 id=\"server-side-render-strategy\"><a href=\"#server-side-render-strategy\">Server-side render strategy<\\/a><\\/h2><ul>\n<li>Requests for different origins will be fetched normally;<\\/li>\n<li>Requests that are not GET will be fetched normally;<\\/li>\n<li>Fingerprinted assets will be loaded into cache at installation time;<\\/li>\n<li>Fingerprinted assets will be loaded from cache first then fallback to the network if needed;<\\/li>\n<li>Paths with an extension will be retrieved stale and update the cache in the background for subsequent request;<\\/li>\n<li>Navigation paths will be loaded from the network then fallback to a page in which <code>worker.responsive<\\/code> and <code>worker.online<\\/code> are set to <code>false<\\/code>;<\\/li>\n<\\/ul>\n<h2 id=\"static-site-generation-strategy\"><a href=\"#static-site-generation-strategy\">Static-site generation strategy<\\/a><\\/h2><ul>\n<li>Requests for different origins will be fetched normally;<\\/li>\n<li>Requests that are not GET will be fetched normally;<\\/li>\n<li>Fingerprinted assets will be loaded into cache at installation time;<\\/li>\n<li>Fingerprinted assets will be loaded from cache first then fallback to the network if needed;<\\/li>\n<li>Paths with an extension will be retrieved stale and update the cache in the background for subsequent request;<\\/li>\n<li>The home page will be loaded network first and then fallback to a cached copy if needed;<\\/li>\n<li>Navigation paths will instead load only the static API data and merge it with the application template to generate a response.<\\/li>\n<li>Navigating to a static route will cache only the data of that page;<\\/li>\n<li>When data is not available in the cache or network it will fallback to a page in which <code>worker.responsive<\\/code> and <code>worker.online<\\/code> are set to <code>false<\\/code>;<\\/li>\n<\\/ul>\n<h2 id=\"custom-strategy\"><a href=\"#custom-strategy\">Custom Strategy<\\/a><\\/h2><p>Nullstack will install automatically your service worker if <code>enabled<\\/code> is set to <code>true<\\/code> with the following events:<\\/p>\n<ul>\n<li><code>install<\\/code><\\/li>\n<li><code>activate<\\/code><\\/li>\n<li><code>fetch<\\/code><\\/li>\n<\\/ul>\n<p>You can override any of those events by creating a <strong>service-worker.js<\\/strong> in the public folder;<\\/p>\n<p>If any of the keywords above are found Nullstack will inject your function in the service worker code instead of the default.<\\/p>\n<p>For convenience a <code>context<\\/code> key is injected in the service worker <code>self<\\/code> with the following keys:<\\/p>\n<ul>\n<li><code>worker<\\/code><\\/li>\n<li><a href=\"/context-project\"><code>project<\\/code><\\/a><\\/li>\n<li><a href=\"/context-environment\"><code>environment<\\/code><\\/a><\\/li>\n<\\/ul>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">function<\\/span> <span class=\"token function\">activate<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\">event<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n  event<span class=\"token punctuation\">.<\\/span><span class=\"token function\">waitUntil<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token keyword\">async<\\/span> <span class=\"token keyword\">function<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n    <span class=\"token keyword\">const<\\/span> cacheNames <span class=\"token operator\">=<\\/span> <span class=\"token keyword\">await<\\/span> caches<span class=\"token punctuation\">.<\\/span><span class=\"token function\">keys<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n    <span class=\"token keyword\">const<\\/span> cachesToDelete <span class=\"token operator\">=<\\/span> cacheNames<span class=\"token punctuation\">.<\\/span><span class=\"token function\">filter<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\">cacheName<\\/span> <span class=\"token operator\">=><\\/span> cacheName <span class=\"token operator\">!==<\\/span> self<span class=\"token punctuation\">.<\\/span>context<span class=\"token punctuation\">.<\\/span>environment<span class=\"token punctuation\">.<\\/span>key<span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n    <span class=\"token keyword\">await<\\/span> Promise<span class=\"token punctuation\">.<\\/span><span class=\"token function\">all<\\/span><span class=\"token punctuation\">(<\\/span>cachesToDelete<span class=\"token punctuation\">.<\\/span><span class=\"token function\">map<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token parameter\">cacheName<\\/span><span class=\"token punctuation\">)<\\/span> <span class=\"token operator\">=><\\/span> caches<span class=\"token punctuation\">.<\\/span><span class=\"token function\">delete<\\/span><span class=\"token punctuation\">(<\\/span>cacheName<span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n    <span class=\"token keyword\">if<\\/span> <span class=\"token punctuation\">(<\\/span>self<span class=\"token punctuation\">.<\\/span>registration<span class=\"token punctuation\">.<\\/span>navigationPreload<span class=\"token punctuation\">)<\\/span> <span class=\"token punctuation\">{<\\/span>\n      <span class=\"token keyword\">await<\\/span> self<span class=\"token punctuation\">.<\\/span>registration<span class=\"token punctuation\">.<\\/span>navigationPreload<span class=\"token punctuation\">.<\\/span><span class=\"token function\">enable<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n    <span class=\"token punctuation\">}<\\/span>\n    self<span class=\"token punctuation\">.<\\/span>clients<span class=\"token punctuation\">.<\\/span><span class=\"token function\">claim<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n  <span class=\"token punctuation\">}<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n<span class=\"token punctuation\">}<\\/span>\n\nself<span class=\"token punctuation\">.<\\/span><span class=\"token function\">addEventListener<\\/span><span class=\"token punctuation\">(<\\/span><span class=\"token string\">'activate'<\\/span><span class=\"token punctuation\">,<\\/span> activate<span class=\"token punctuation\">)<\\/span><span class=\"token punctuation\">;<\\/span>\n<\\/code><\\/pre>\n<blockquote>\n<p>ðŸ’¡ The example above is extracted from the generated service worker and uses <code>self.context.environment.key<\\/code><\\/p>\n<\\/blockquote>\n","persistent":true,"locale":"en-US","i18n":{"lead":"Have any questions or suggestions?","cta":"Join our Discord","next":"Next Step","learn":"Learn more about"},"description":"The worker object is a proxy in the Nullstack Context available in both client and server and gives you granular control of your PWA behavior","topics":[{"title":"About Nullstack","links":[{"title":"What is Nullstack?","href":"/what-is-nullstack"},{"title":"Getting started","href":"/getting-started"}]},{"title":"Core Features","links":[{"title":"Stateless Components","href":"/stateless-components"},{"title":"Stateful components","href":"/stateful-components"},{"title":"Full stack lifecycle","href":"/full-stack-lifecycle"},{"title":"Server functions","href":"/server-functions"},{"title":"Context","href":"/context"},{"title":"Two-way bindings","href":"/two-way-bindings"},{"title":"JSX elements","href":"/jsx-elements"},{"title":"Refs","href":"/refs"},{"title":"Styles","href":"/styles"},{"title":"Persistent Components","href":"/persistent-components"}]},{"title":"Context Keys","links":[{"title":"Routes and params","href":"/routes-and-params"},{"title":"Context data","href":"/context-data"},{"title":"Context instances","href":"/context-instances"},{"title":"Context environment","href":"/context-environment"},{"title":"Context page","href":"/context-page"},{"title":"Context project","href":"/context-project"},{"title":"Context settings","href":"/context-settings"},{"title":"Context secrets","href":"/context-secrets"},{"title":"Server request and response","href":"/server-request-and-response"},{"title":"Service Worker","href":"/service-worker"}]},{"title":"Advanced concepts","links":[{"title":"Proxy","href":"/proxy"},{"title":"Application Startup","href":"/application-startup"},{"title":"Script runner","href":"/script-runner"},{"title":"How to customize Webpack","href":"/how-to-customize-webpack"},{"title":"Transpilation and Security","href":"/transpilation-and-security"},{"title":"TypeScript","href":"/typescript"}]},{"title":"Build Modes","links":[{"title":"Server-side rendering","href":"/server-side-rendering"},{"title":"Static site generation","href":"/static-site-generation"},{"title":"Single page applications","href":"/single-page-applications"}]},{"title":"Other","links":[{"title":"Nullstack Logo","href":"/nullstack-logo"},{"title":"How to deploy","href":"/how-to-deploy-a-nullstack-application"}]}]},"GoogleAnalytics/0-0-0-19":{"persistent":false},"Loader/0-0-0-21":{"persistent":false},"Footer/0-0-0-22":{"persistent":false,"locale":"en-US","i18n":{"links":[{"title":"YouTube","href":"https://www.youtube.com/channel/UCUNPaxoppH3lu6JTrUX78Ww"},{"title":"Twitter","href":"https://twitter.com/nullstackapp"},{"title":"GitHub","href":"https://github.com/nullstack"}],"star":{"story":"Want to show your love and help us spread the word?","action":"Leave a star on GitHub"}}}},"page":{"image":"/image-1200x630.png","status":200,"locale":"en-US","title":"Context Service Worker - Nullstack","description":"The worker object is a proxy in the Nullstack Context available in both client and server and gives you granular control of your PWA behavior"}}